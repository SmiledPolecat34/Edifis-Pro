--- a/backend/controllers/auth.controller.js
+++ b/backend/controllers/auth.controller.js
@@ -3,6 +3,7 @@ const path = require("path");
 require("dotenv").config({ path: path.resolve(__dirname, "../../.env") });
 
 const { User, PasswordResetToken } = require("../models");
+const logger = require("../config/logger");
 const { sendMail } = require("../services/email.service");
 const { hash: hashPassword } = require("../services/password.service");
 
@@ -25,8 +26,15 @@ exports.forgotPassword = async (req, res) => {
         };
 
         const user = await User.findOne({ where: { email } });
+        
+        // Log de sécurité : tentative de réinitialisation
+        logger.info("Password reset requested", {
+            email: email,
+            ip: req.ip,
+            userAgent: req.headers["user-agent"],
+            userExists: !!user
+        });
+        
         if (!user) {
-            return res.status(200).json(genericResponse);
+            return res.status(200).json(genericResponse);
         }
 
@@ -58,6 +66,12 @@ exports.forgotPassword = async (req, res) => {
             html: `<p>Bonjour,</p><p>Vous avez demandé la réinitialisation de votre mot de passe.</p><p><a href="${resetLink}">Cliquez ici pour réinitialiser votre mot de passe</a> (valide ${RESET_TOKEN_TTL_MINUTES} minutes).</p><p>Si vous n'êtes pas à l'origine de cette demande, ignorez ce message.</p>`,
         });
 
+        // Log de sécurité : email envoyé
+        logger.info("Password reset email sent", {
+            userId: user.user_id,
+            email: email,
+            ip: req.ip
+        });
+
         return res.status(200).json(genericResponse);
     } catch (err) {
+        logger.error("Password reset error", {
+            error: err.message,
+            email: req.body.email,
+            ip: req.ip
+        });
         return res.status(500).json({ message: "Erreur serveur" });
     }
 };
@@ -71,14 +85,35 @@ exports.resetPassword = async (req, res) => {
         const record = await PasswordResetToken.findOne({
             where: { token_hash: tokenHash },
         });
 
         if (!record) {
+            logger.warn("Invalid reset token used", {
+                ip: req.ip,
+                userAgent: req.headers["user-agent"],
+                tokenHash: tokenHash.substring(0, 8) + "..."
+            });
             return res.status(400).json({ message: "Token invalide" });
         }
+        
         if (record.used_at) {
+            logger.warn("Already used reset token attempted", {
+                ip: req.ip,
+                userId: record.user_id,
+                tokenHash: tokenHash.substring(0, 8) + "..."
+            });
             return res.status(400).json({ message: "Token déjà utilisé" });
         }
+        
         if (new Date(record.expires_at).getTime() < Date.now()) {
+            logger.warn("Expired reset token used", {
+                ip: req.ip,
+                userId: record.user_id,
+                tokenHash: tokenHash.substring(0, 8) + "...",
+                expiredAt: record.expires_at
+            });
             return res.status(400).json({ message: "Token expiré" });
         }
 
@@ -99,8 +134,19 @@ exports.resetPassword = async (req, res) => {
             },
         });
 
+        // Log de sécurité : mot de passe réinitialisé avec succès
+        logger.info("Password successfully reset", {
+            userId: user.user_id,
+            email: user.email,
+            ip: req.ip,
+            userAgent: req.headers["user-agent"]
+        });
+
         return res.json({ message: "Mot de passe réinitialisé avec succès" });
     } catch (err) {
+        logger.error("Password reset error", {
+            error: err.message,
+            ip: req.ip
+        });
         return res.status(500).json({ message: "Erreur serveur" });
     }
 };

--- a/backend/middlewares/auth.middleware.js
+++ b/backend/middlewares/auth.middleware.js
@@ -1,4 +1,5 @@
 const jwt = require("jsonwebtoken");
+const logger = require("../config/logger");
 
 const protect = (req, res, next) => {
     try {
@@ -6,10 +7,20 @@ const protect = (req, res, next) => {
         if (!token) {
             return res.status(401).json({ message: "Accès refusé. Token manquant" });
         }
+        
         const decoded = jwt.verify(token, process.env.JWT_SECRET);
-
         req.user = decoded;
+        
+        // Log des accès authentifiés
+        logger.debug("Authenticated access", {
+            userId: decoded.userId,
+            role: decoded.role,
+            ip: req.ip,
+            endpoint: req.originalUrl,
+            method: req.method
+        });
+        
         next();
     } catch (error) {
+        logger.warn("Authentication failed", {
+            error: error.message,
+            ip: req.ip,
+            userAgent: req.headers["user-agent"],
+            endpoint: req.originalUrl,
+            token: token ? token.substring(0, 20) + "..." : "none"
+        });
         res.status(401).json({ message: "Token invalide" });
     }
 };
@@ -19,6 +30,12 @@ const protect = (req, res, next) => {
 // Middleware pour vérifier si l'utilisateur est Admin
 const isAdmin = (req, res, next) => {
     if (!req.user || req.user.role !== "Admin") {
+        logger.warn("Unauthorized admin access attempt", {
+            userId: req.user?.userId,
+            role: req.user?.role,
+            ip: req.ip,
+            endpoint: req.originalUrl
+        });
         return res.status(403).json({ message: "Accès refusé. Seul un Admin peut accéder à ces options." });
     }
     next();
@@ -27,6 +44,12 @@ const isAdmin = (req, res, next) => {
 // Middleware pour vérifier si l'utilisateur est Worker
 const isWorker = (req, res, next) => {
     if (!req.user || req.user.role !== "Worker") {
+        logger.warn("Unauthorized worker access attempt", {
+            userId: req.user?.userId,
+            role: req.user?.role,
+            ip: req.ip,
+            endpoint: req.originalUrl
+        });
         return res.status(403).json({ message: "Accès refusé. Seul un Worker peut accéder à ces options." });
     }
     next();
@@ -35,6 +58,12 @@ const isWorker = (req, res, next) => {
 // Middleware pour vérifier si l'utilisateur est Manager
 const isManager = (req, res, next) => {
     if (!req.user || req.user.role !== "Manager") {
+        logger.warn("Unauthorized manager access attempt", {
+            userId: req.user?.userId,
+            role: req.user?.role,
+            ip: req.ip,
+            endpoint: req.originalUrl
+        });
         return res.status(403).json({ message: "Accès refusé. Seul un Manager peut accéder à ces options." });
     }
     next();
@@ -47,6 +76,13 @@ const checkAdminOrOwner = (req, res, next) => {
     // Vérifie si l'utilisateur est un admin ou si l'ID correspond
     if (req.user?.role === "Admin" || String(userIdFromToken) === String(userIdFromParams)) {
         return next();
     }
 
+    logger.warn("Unauthorized resource access attempt", {
+        userId: userIdFromToken,
+        role: req.user?.role,
+        targetUserId: userIdFromParams,
+        ip: req.ip,
+        endpoint: req.originalUrl
+    });
+    
     return res.status(403).json({ message: "Accès refusé. Seul un Admin ou le propriétaire du compte peut effectuer cette action." });
 };

--- a/backend/middlewares/rateLimit.middleware.js
+++ b/backend/middlewares/rateLimit.middleware.js
@@ -1,4 +1,5 @@
 const { RateLimiterMemory } = require("rate-limiter-flexible");
+const logger = require("../config/logger");
 
 /**
  * Rate limit par adresse IP (générique)
@@ -17,6 +18,12 @@ function rateLimitIP(opts = {}) {
             await limiter.consume(key);
             return next();
         } catch (rejRes) {
+            logger.warn("Rate limit exceeded", {
+                ip: key,
+                endpoint: req.originalUrl,
+                remainingPoints: rejRes.remainingPoints || 0,
+                msBeforeNext: rejRes.msBeforeNext || 0
+            });
             return res.status(429).json({ message: "Trop de requêtes. Réessayez plus tard." });
         }
     };
@@ -44,6 +51,15 @@ function rateLimitIPAndEmail(opts = {}) {
 
             return next();
         } catch (err) {
+            logger.warn("Rate limit exceeded (IP + Email)", {
+                ip: ipKey,
+                email: email || "none",
+                endpoint: req.originalUrl,
+                userAgent: req.headers["user-agent"],
+                remainingPoints: err.remainingPoints || 0,
+                msBeforeNext: err.msBeforeNext || 0
+            });
             return res.status(429).json({ message: "Trop de requêtes. Réessayez plus tard." });
         }
     };
