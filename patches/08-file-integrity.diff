--- a/backend/package.json
+++ b/backend/package.json
@@ -15,6 +15,7 @@
     "bcryptjs": "^2.4.3",
     "cors": "^2.8.5",
     "dotenv": "^16.0.3",
+    "file-type": "^18.5.0",
     "express": "^4.18.2",
     "helmet": "^6.0.1",
     "joi": "^17.7.0",

--- a/backend/middlewares/upload.middleware.js
+++ b/backend/middlewares/upload.middleware.js
@@ -1,4 +1,6 @@
 const multer = require("multer");
+const { fileTypeFromBuffer } = require("file-type");
+const logger = require("../config/logger");
 const path = require("path");
 const fs = require("fs");
 
@@ -6,6 +8,15 @@ const fs = require("fs");
 const uploadsDir = path.resolve(__dirname, "../uploads");
 const profilePicturesDir = path.resolve(uploadsDir, "profile_pictures");
 const constructionSitesDir = path.resolve(uploadsDir, "construction_sites");
+
+// Types MIME autorisés pour les images
+const ALLOWED_IMAGE_TYPES = [
+    'image/jpeg',
+    'image/png',
+    'image/webp',
+    'image/gif'
+];
+
 if (!fs.existsSync(uploadsDir)) {
     fs.mkdirSync(uploadsDir, { recursive: true });
 }
@@ -16,6 +27,45 @@ if (!fs.existsSync(constructionSitesDir)) {
     fs.mkdirSync(constructionSitesDir, { recursive: true });
 }
 
+/**
+ * Validation de l'intégrité et du type de fichier
+ */
+const validateFileIntegrity = async (req, res, next) => {
+    if (!req.file) {
+        return next();
+    }
+
+    try {
+        // Vérification du type MIME réel du fichier
+        const fileType = await fileTypeFromBuffer(req.file.buffer);
+        
+        if (!fileType) {
+            logger.warn("File upload rejected - unknown file type", {
+                originalName: req.file.originalname,
+                mimetype: req.file.mimetype,
+                size: req.file.size,
+                ip: req.ip
+            });
+            return res.status(400).json({ 
+                message: "Type de fichier non reconnu" 
+            });
+        }
+
+        if (!ALLOWED_IMAGE_TYPES.includes(fileType.mime)) {
+            logger.warn("File upload rejected - invalid file type", {
+                originalName: req.file.originalname,
+                detectedType: fileType.mime,
+                declaredType: req.file.mimetype,
+                ip: req.ip
+            });
+            return res.status(400).json({ 
+                message: "Type de fichier non autorisé. Seules les images sont acceptées." 
+            });
+        }
+
+        // Mise à jour du type MIME avec le type détecté
+        req.file.mimetype = fileType.mime;
+        req.file.detectedExtension = fileType.ext;
+        
+        next();
+    } catch (error) {
+        logger.error("File validation error", {
+            error: error.message,
+            originalName: req.file.originalname,
+            ip: req.ip
+        });
+        return res.status(500).json({ 
+            message: "Erreur lors de la validation du fichier" 
+        });
+    }
+};
+
 // Configuration pour les photos de profil
 const profilePictureStorage = multer.diskStorage({
     destination: (req, file, cb) => {
@@ -23,7 +73,12 @@ const profilePictureStorage = multer.diskStorage({
     },
     filename: (req, file, cb) => {
         const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
-        cb(null, `profile-${uniqueSuffix}${path.extname(file.originalname)}`);
+        // Utiliser l'extension détectée si disponible
+        const extension = file.detectedExtension ? 
+            `.${file.detectedExtension}` : 
+            path.extname(file.originalname);
+        
+        cb(null, `profile-${uniqueSuffix}${extension}`);
     },
 });
 
@@ -33,7 +88,12 @@ const constructionSiteStorage = multer.diskStorage({
     },
     filename: (req, file, cb) => {
         const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
-        cb(null, `site-${uniqueSuffix}${path.extname(file.originalname)}`);
+        // Utiliser l'extension détectée si disponible
+        const extension = file.detectedExtension ? 
+            `.${file.detectedExtension}` : 
+            path.extname(file.originalname);
+        
+        cb(null, `site-${uniqueSuffix}${extension}`);
     },
 });
 
@@ -41,7 +101,8 @@ const constructionSiteStorage = multer.diskStorage({
 const fileFilter = (req, file, cb) => {
     // Vérification basique du type MIME déclaré
     if (file.mimetype.startsWith("image/")) {
-        cb(null, true);
+        // La validation réelle se fera dans validateFileIntegrity
+        cb(null, true);
     } else {
         cb(new Error("Seules les images sont autorisées"), false);
     }
@@ -63,5 +124,6 @@ const uploadConstructionSiteImage = multer({
 
 module.exports = {
     uploadProfilePicture,
-    uploadConstructionSiteImage
+    uploadConstructionSiteImage,
+    validateFileIntegrity
 };

--- a/backend/routes/user.routes.js
+++ b/backend/routes/user.routes.js
@@ -3,7 +3,7 @@ const router = express.Router();
 
 const userController = require("../controllers/user.controller");
 const { protect, isAdmin, checkAdminOrOwner } = require("../middlewares/auth.middleware");
-const { uploadProfilePicture } = require("../middlewares/upload.middleware");
+const { uploadProfilePicture, validateFileIntegrity } = require("../middlewares/upload.middleware");
 const { validate, schemas } = require("../middlewares/validator.middleware");
 
 // Routes protégées (nécessitent une authentification)
@@ -15,6 +15,7 @@ router.get("/:id", protect, checkAdminOrOwner, userController.getUserById);
 router.put(
     "/:id/profile-picture",
     protect,
     checkAdminOrOwner,
     uploadProfilePicture.single("profilePicture"),
+    validateFileIntegrity,
     userController.updateProfilePicture
 );
