--- a/backend/package.json
+++ b/backend/package.json
@@ -8,6 +8,8 @@
     "dev": "nodemon server.js",
     "test": "jest",
     "test:watch": "jest --watch",
+    "audit": "npm audit --audit-level moderate",
+    "audit:fix": "npm audit fix",
     "test:coverage": "jest --coverage"
   },
   "dependencies": {
@@ -30,7 +32,9 @@
   "devDependencies": {
     "@types/jest": "^29.5.0",
     "jest": "^29.5.0",
-    "nodemon": "^2.0.20"
+    "nodemon": "^2.0.20",
+    "audit-ci": "^6.6.1",
+    "snyk": "^1.1200.0"
   },
   "jest": {
     "testEnvironment": "node",

--- a/.github/workflows/security-audit.yml
+++ b/.github/workflows/security-audit.yml
@@ -0,0 +1,45 @@
+name: Security Audit
+
+on:
+  push:
+    branches: [ main, develop ]
+  pull_request:
+    branches: [ main ]
+  schedule:
+    # Audit quotidien à 2h du matin
+    - cron: '0 2 * * *'
+
+jobs:
+  audit:
+    runs-on: ubuntu-latest
+    
+    steps:
+    - name: Checkout code
+      uses: actions/checkout@v3
+      
+    - name: Setup Node.js
+      uses: actions/setup-node@v3
+      with:
+        node-version: '18'
+        cache: 'npm'
+        cache-dependency-path: backend/package-lock.json
+        
+    - name: Install backend dependencies
+      run: |
+        cd backend
+        npm ci
+        
+    - name: Run npm audit
+      run: |
+        cd backend
+        npm audit --audit-level moderate
+        
+    - name: Run audit-ci
+      run: |
+        cd backend
+        npx audit-ci --moderate
+        
+    - name: Run Snyk security scan
+      run: |
+        cd backend
+        npx snyk test --severity-threshold=medium
+      env:
+        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

--- a/backend/scripts/security-check.js
+++ b/backend/scripts/security-check.js
@@ -0,0 +1,89 @@
+#!/usr/bin/env node
+
+/**
+ * Script de vérification de sécurité automatisé
+ * Vérifie les vulnérabilités connues et les configurations de sécurité
+ */
+
+const { execSync } = require('child_process');
+const fs = require('fs');
+const path = require('path');
+
+console.log('🔒 Démarrage de l\'audit de sécurité...\n');
+
+// 1. Vérification des dépendances
+console.log('📦 Vérification des vulnérabilités des dépendances...');
+try {
+    execSync('npm audit --audit-level moderate', { stdio: 'inherit' });
+    console.log('✅ Aucune vulnérabilité critique détectée\n');
+} catch (error) {
+    console.log('❌ Vulnérabilités détectées dans les dépendances\n');
+    process.exit(1);
+}
+
+// 2. Vérification des variables d'environnement critiques
+console.log('🔑 Vérification des variables d\'environnement...');
+const requiredEnvVars = [
+    'JWT_SECRET',
+    'DB_PASSWORD',
+    'EMAIL_PASSWORD',
+    'CORS_ORIGINS'
+];
+
+const envFile = path.join(__dirname, '../../.env');
+let envContent = '';
+
+if (fs.existsSync(envFile)) {
+    envContent = fs.readFileSync(envFile, 'utf8');
+}
+
+const missingVars = [];
+const weakSecrets = [];
+
+requiredEnvVars.forEach(varName => {
+    const match = envContent.match(new RegExp(`^${varName}=(.*)$`, 'm'));
+    if (!match) {
+        missingVars.push(varName);
+    } else {
+        const value = match[1].trim();
+        if (varName.includes('SECRET') || varName.includes('PASSWORD')) {
+            if (value.length < 32) {
+                weakSecrets.push(`${varName} (longueur: ${value.length})`);
+            }
+        }
+    }
+});
+
+if (missingVars.length > 0) {
+    console.log(`❌ Variables manquantes: ${missingVars.join(', ')}`);
+    process.exit(1);
+}
+
+if (weakSecrets.length > 0) {
+    console.log(`⚠️  Secrets faibles détectés: ${weakSecrets.join(', ')}`);
+    console.log('   Recommandation: utilisez des secrets d\'au moins 32 caractères');
+}
+
+console.log('✅ Variables d\'environnement vérifiées\n');
+
+// 3. Vérification des permissions de fichiers sensibles
+console.log('🔐 Vérification des permissions de fichiers...');
+const sensitiveFiles = [
+    '../../.env',
+    '../config/database.js',
+    '../config/sequelize.js'
+];
+
+sensitiveFiles.forEach(file => {
+    const filePath = path.join(__dirname, file);
+    if (fs.existsSync(filePath)) {
+        const stats = fs.statSync(filePath);
+        const mode = (stats.mode & parseInt('777', 8)).toString(8);
+        if (mode !== '600' && mode !== '644') {
+            console.log(`⚠️  ${file} a des permissions trop ouvertes (${mode})`);
+        }
+    }
+});
+
+console.log('✅ Permissions vérifiées\n');
+console.log('🎉 Audit de sécurité terminé avec succès!');

--- a/backend/scripts/update-dependencies.js
+++ b/backend/scripts/update-dependencies.js
@@ -0,0 +1,52 @@
+#!/usr/bin/env node
+
+/**
+ * Script de mise à jour sécurisée des dépendances
+ * Met à jour uniquement les patches de sécurité
+ */
+
+const { execSync } = require('child_process');
+const fs = require('fs');
+
+console.log('🔄 Mise à jour des dépendances de sécurité...\n');
+
+try {
+    // 1. Sauvegarde du package-lock.json
+    if (fs.existsSync('package-lock.json')) {
+        fs.copyFileSync('package-lock.json', 'package-lock.json.backup');
+        console.log('💾 Sauvegarde de package-lock.json créée');
+    }
+
+    // 2. Audit et correction automatique
+    console.log('🔍 Recherche de vulnérabilités...');
+    execSync('npm audit', { stdio: 'inherit' });
+    
+    console.log('\n🔧 Application des correctifs de sécurité...');
+    execSync('npm audit fix --only=prod', { stdio: 'inherit' });
+    
+    // 3. Vérification post-mise à jour
+    console.log('\n✅ Vérification post-mise à jour...');
+    execSync('npm test', { stdio: 'inherit' });
+    
+    console.log('\n🎉 Mise à jour de sécurité terminée avec succès!');
+    
+    // 4. Nettoyage de la sauvegarde
+    if (fs.existsSync('package-lock.json.backup')) {
+        fs.unlinkSync('package-lock.json.backup');
+        console.log('🗑️  Sauvegarde supprimée');
+    }
+    
+} catch (error) {
+    console.error('\n❌ Erreur lors de la mise à jour:', error.message);
+    
+    // Restauration de la sauvegarde en cas d'erreur
+    if (fs.existsSync('package-lock.json.backup')) {
+        fs.copyFileSync('package-lock.json.backup', 'package-lock.json');
+        fs.unlinkSync('package-lock.json.backup');
+        console.log('🔄 Package-lock.json restauré depuis la sauvegarde');
+    }
+    
+    process.exit(1);
+}
+
+console.log('\n📋 N\'oubliez pas de tester l\'application après cette mise à jour!');
